#!/bin/sh
# crul: Cribl curl
# Allows quick access to Cribl server REST API.
# Examples:
#   # calls GET http://localhost:19000/api/v1/health
#   crul -p 19000 health
#
#   # other methods are supported
#   crul system/redis-cache-limits PATCH '{"keyTTLSecs":667}'
#
#   # check health of every config helper at the same time
#   for g in `crul master/groups|jq .items[].id -r`; do crul m/$g/health & done
#
# Requires curl and jq.
# Performs login - does not require CRIBL_NOAUTH

port=9000
user=admin
pass=admin
curlopts=
tokenCache=~/.crul

while getopts hxp:o:c:C: opt; do
  case $opt in
    h) echo $0: talks to cribl server HTTP API
      echo 'Options (must come before positional arguments):'
      echo "-p	server port, default is $port"
      echo "-c	credentials in form user:password, default is $user:$pass"
      echo "-C	do not use cache auth token from $tokenCache"
      echo '-x	set -x (stdout every line)'
      echo '-o	passes the arg to curl'
      exit;;
    x) set -x
      shift
      ;;
    o) curlopts="$OPTARG"
      shift; shift
      ;;
    p) port=$OPTARG
      shift; shift
      ;;
    c) user=${OPTARG%%:*} pass=${OPTARG##*:}
      shift; shift
      ;;
    C) rm -f $tokenCache
      shift
      ;;
  esac
done

fail() {
  >&2 echo $@
  exit 1
}

type curl >/dev/null || fail curl is required but not in PATH
type jq >/dev/null   || fail jq is required but not in PATH

path=$1
[ -z "$path" ] && fail Usage: $0 [OPTIONS] PATH [METHOD] [JSON]

method=${2:-GET}
if [ -n "$3" ]; then
  json="-d $3"
fi

if [ -f $tokenCache ] && find $tokenCache -mmin -60 >/dev/null; then
  token=`cat $tokenCache`
else
  token=`curl -X POST http://localhost:$port/api/v1/auth/login \
    -H 'Content-Type: application/json' -H 'accept: application/json' \
    -d '{"username":"'$user'","password":"'$pass'"}' -s| jq .token -r`
  echo $token > $tokenCache
fi

[ $? != 0 ] && fail Error logging in

  # -H "accept: application/tar+gzip" \
out=`curl -s $curlopts -X $method "http://localhost:$port/api/v1/$path" \
  -w "%{http_code}" \
  -H 'Content-Type: application/json' \
  -H 'accept: application/json' \
  -H "Authorization: Bearer $token" $json`

if [ -t 1 ]; then
  echo "$out"|jq
else
  echo "$out"
fi
